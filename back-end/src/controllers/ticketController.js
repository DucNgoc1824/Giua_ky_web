const ticketModel = require('../models/ticketModel');
const studentModel = require('../models/studentModel');
const assignmentModel = require('../models/assignmentModel');

const ticketController = {
  createTicket: async (req, res) => {
    try {
      console.log('üì® Nh·∫≠n request t·∫°o ticket:', req.body);
      console.log('üë§ User info:', req.user);
      
      const student_id = req.user.studentId; 
      const { subject_id, semester, message_text } = req.body;

      if (!subject_id || !semester || !message_text) {
        console.log('‚ùå Thi·∫øu th√¥ng tin:', { subject_id, semester, message_text });
        return res
          .status(400)
          .json({ message: 'Vui l√≤ng ch·ªçn M√¥n, nh·∫≠p H·ªçc k·ª≥ v√† N·ªôi dung.' });
      }
      
      if (message_text.length > 255) {
         return res.status(400).json({ message: 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c qu√° 255 k√Ω t·ª±.' });
      }

      console.log('üîç T√¨m class_id cho student_id:', student_id);
      const class_id = await studentModel.getClassId(student_id);
      console.log('üìö Class ID:', class_id);
      
      if (!class_id) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªõp c·ªßa sinh vi√™n.' });
      }

      console.log('üîç T√¨m gi·∫£ng vi√™n cho:', { subject_id, class_id, semester });
      const lecturer_id = await assignmentModel.findLecturerForCourse(
        subject_id,
        class_id,
        semester
      );
      console.log('üë®‚Äçüè´ Lecturer ID:', lecturer_id);

      // N·∫øu kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n ph√¢n c√¥ng, cho ph√©p g·ª≠i v·ªõi lecturer_id = null
      // Ticket s·∫Ω ƒë∆∞·ª£c g·ª≠i t·ªõi h·ªá th·ªëng chung
      console.log('üíæ T·∫°o ticket v·ªõi:', { student_id, subject_id, lecturer_id: lecturer_id || null, message_text });
      const newTicketId = await ticketModel.create(
        student_id,
        subject_id,
        lecturer_id || null,
        message_text
      );
      console.log('‚úÖ T·∫°o ticket th√†nh c√¥ng, ID:', newTicketId);

      res
        .status(201)
        .json({ message: 'G·ª≠i th·∫Øc m·∫Øc th√†nh c√¥ng!', ticketId: newTicketId });
    } catch (error) {
      console.error('‚ùå L·ªói t·∫°o ticket:', error);
      if (error.code === 'ER_NO_REFERENCED_ROW_2') {
         return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y M√¥n h·ªçc n√†y.' });
      }
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  getMyTickets: async (req, res) => {
    try {
      const student_id = req.user.studentId;
      const tickets = await ticketModel.findByStudent(student_id);
      res.status(200).json(tickets);
    } catch (error) {
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  getTicketInbox: async (req, res) => {
    try {
      const lecturer_id = req.user.lecturerId;
      const tickets = await ticketModel.findByLecturer(lecturer_id);
      res.status(200).json(tickets);
    } catch (error) {
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  // Ph·∫£n h·ªìi ticket (Gi·∫£ng vi√™n)
  respondToTicket: async (req, res) => {
    try {
      const { ticket_id } = req.params;
      const { response_text } = req.body;

      if (!response_text || response_text.trim() === '') {
        return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p n·ªôi dung ph·∫£n h·ªìi.' });
      }

      const affectedRows = await ticketModel.respondToTicket(ticket_id, response_text);
      
      if (affectedRows === 0) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ticket.' });
      }

      res.status(200).json({ message: 'Ph·∫£n h·ªìi th√†nh c√¥ng!' });
    } catch (error) {
      console.error('‚ùå L·ªói ph·∫£n h·ªìi ticket:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },

  // L·∫•y chi ti·∫øt ticket
  getTicketById: async (req, res) => {
    try {
      const { ticket_id } = req.params;
      const ticket = await ticketModel.getById(ticket_id);
      
      if (!ticket) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ticket.' });
      }

      res.status(200).json(ticket);
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y chi ti·∫øt ticket:', error);
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },
};

module.exports = ticketController;